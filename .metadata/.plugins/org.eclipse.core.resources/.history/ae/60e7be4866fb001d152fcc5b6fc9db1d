package _99_etc;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;

public class Prob_2805 {
    public static void main(String[] args) throws NumberFormatException, IOException {
    	BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
    	BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));
    	StringBuilder sb = new StringBuilder();
    	
        String str = reader.readLine();
        String[] strArr = str.split(" ");
        
        //str로 받은 후 나무의 개수
        int index = Integer.parseInt(strArr[0]);
        
        //str로 받은 후 필요한 나무 높이
        int num = Integer.parseInt(strArr[1]);
        
        //나무들의 배열 초기화
        int[] intArr = new int[index];
        
        //나무 배열 중 최대 높이 초기화
        int max = Integer.MIN_VALUE;
        
        //자른 나무들 높이 확인할 변수 초기화
        int answer = 0;
        
        
        
        //EOF 구문 사용
        while((str=reader.readLine()) != null){
        	if(str != null)
        		strArr = str.split(" ");
        }
        
        //나무들의 배열 선언
        for(int i = 0; i < index; i++) {
    		intArr[i] = Integer.parseInt(strArr[i]);
    		if(intArr[i] > max)
    			max = intArr[i];
    	}
        
        //나무의 최대 높이에서 0까지 줄여가며 필요한 높이에 도달했을 때 break 후 출력
        for(int i = max; i > 0; i++) {
        	
        	// for문에서 자른 나무 높이들 합 구하기
        	for(int j = 0; j < index; j++) {
        		answer += max - intArr[j];
        	}
        	//필요한 나무 길이에 맞는 값에 도달하면 해당 나무 높이 반환 후 break
        	if(answer == num) {
        		answer = i;
        		break;
        	}
        }
        
        writer.write(Integer.toString(answer));
        
        writer.flush();
        writer.close();
        
        reader.close();
        
    }
}
